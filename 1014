import os
import re
import pandas as pd
from ast import literal_eval
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# ─────────────────────────────────────────
# 0) 데이터 로드
# ─────────────────────────────────────────
HERE = os.path.dirname(__file__)
CANDIDATES = ["movies_details_clean.csv", "movies_details.csv"]

def _read_first_existing():
    for name in CANDIDATES:
        path = os.path.join(HERE, name)
        if os.path.exists(path):
            df = pd.read_csv(path)
            print(f"📄 loaded: {path} -> {df.shape}")
            return df, path
    raise FileNotFoundError("movies_details_clean.csv 또는 movies_details.csv 파일이 폴더에 없습니다.")

df, LOADED_PATH = _read_first_existing()

# ─────────────────────────────────────────
# 1) 데이터 점검 및 기본 통계
# ─────────────────────────────────────────
print("\n[기본 정보]")
print("행(row), 열(column) 수:", df.shape)
print("\n[기술통계 요약]")
print(df.describe(include="all").T.head(10))  # 앞부분만 보기 좋게

# ─────────────────────────────────────────
# 2) 결측치 점검 및 처리
# ─────────────────────────────────────────
print("\n[결측치 개수 확인]")
print(df.isnull().sum())

# 결측치가 절반 이상인 열 제거
df.dropna(axis=1, thresh=len(df)*0.5, inplace=True)
print("\n➡ 50% 이상 결측치 열 제거 후:", df.shape)

# 결측치는 공백 문자열로 채우기
fill_cols = ["genres", "keywords", "cast", "director", "overview", "title"]
for col in fill_cols:
    if col in df.columns:
        df[col].fillna("", inplace=True)

# ─────────────────────────────────────────
# 3) 문자열 정리 (strip, lower, upper, replace)
# ─────────────────────────────────────────
if "title" in df.columns:
    # 공백 제거
    df["title"] = df["title"].astype(str).str.strip()
    # 모든 제목을 소문자로 저장
    df["title_lower"] = df["title"].str.lower()
    # 대문자 버전도 참고용으로 추가
    df["title_upper"] = df["title"].str.upper()
    # 불필요한 특수문자 예시 치환
    df["title"] = df["title"].replace(r"[^0-9A-Za-z가-힣\s]", "", regex=True)

# ─────────────────────────────────────────
# 4) 리스트형 데이터 정규화
# ─────────────────────────────────────────
def to_list(x):
    if isinstance(x, list):
        return x
    s = str(x).strip()
    if not s:
        return []
    if s.startswith("[") and s.endswith("]"):
        try:
            val = literal_eval(s)
            if isinstance(val, list):
                return [str(t) for t in val]
        except:
            pass
    return [t.strip() for t in re.split(r"[,/|]", s) if t.strip()]

for col in ["genres", "keywords", "cast"]:
    if col in df.columns:
        df[col] = df[col].apply(to_list)

if "director" in df.columns:
    df["director"] = df["director"].astype(str).str.strip()

# ─────────────────────────────────────────
# 5) 통합 텍스트 컬럼 생성
# ─────────────────────────────────────────
df["combined_features"] = (
    df.get("genres", "").apply(" ".join) + " " +
    df.get("keywords", "").apply(" ".join) + " " +
    df.get("director", "") + " " +
    df.get("cast", "").apply(" ".join) + " " +
    df.get("overview", "").astype(str)
).str.strip()

# ─────────────────────────────────────────
# 6) TF-IDF + 코사인 유사도
# ─────────────────────────────────────────
vectorizer = TfidfVectorizer(stop_words=None, min_df=1, ngram_range=(1, 2))
tfidf = vectorizer.fit_transform(df["combined_features"])
cosine_sim = cosine_similarity(tfidf, tfidf)

# ─────────────────────────────────────────
# 7) 기본 통계 (mean, max, min, sort_values)
# ─────────────────────────────────────────
if "vote_average" in df.columns:
    print("\n[평점 통계]")
    print(f"평균: {df['vote_average'].mean():.2f}")
    print(f"최고: {df['vote_average'].max():.2f}")
    print(f"최저: {df['vote_average'].min():.2f}")

    # 평점 높은 상위 5개
    print("\n[평점 상위 5개 영화]")
    print(df.sort_values(by="vote_average", ascending=False)[["title", "vote_average"]].head(5))

# ─────────────────────────────────────────
# 8) 검색 / 추천 함수
# ─────────────────────────────────────────
def search_titles(q, top=20):
    q = str(q).strip().lower()
    hits = df[df["title_lower"].str.contains(re.escape(q), na=False)]["title"].dropna().unique().tolist()
    return hits[:top]

def _find_idx(title):
    q = str(title).strip().lower()
    exact = df.index[df["title_lower"] == q]
    if len(exact):
        return int(exact[0])
    partial = df.index[df["title_lower"].str.contains(re.escape(q), na=False)]
    if len(partial):
        return int(partial[0])
    return None

def recommend_by_content(title, top_n=10, include_scores=False):
    idx = _find_idx(title)
    if idx is None:
        examples = search_titles("", 10)
        return f"❌ 제목을 못 찾았어요: {title}\n   예시: {examples}"
    sims = list(enumerate(cosine_sim[idx]))
    sims = sorted(sims, key=lambda x: x[1], reverse=True)
    sims = [s for s in sims if s[0] != idx][:top_n]
    rec_idx = [i for i, _ in sims]
    cols = [c for c in ["title", "genres", "vote_average", "release_date"] if c in df.columns]
    out = df.iloc[rec_idx][cols].reset_index(drop=True).copy()
    if include_scores:
        out["similarity"] = [score for _, score in sims]
    return out.sort_values(by="vote_average", ascending=False)  # 평점순 정렬

# ─────────────────────────────────────────
# 9) 단독 실행 테스트
# ─────────────────────────────────────────
if __name__ == "__main__":
    print("\n샘플 10개 제목:", df["title"].dropna().head(10).tolist())
    print("검색 예시('판타스틱'):", search_titles("판타스틱"))
    print("검색 예시('귀멸'):", search_titles("귀멸"))
    print("검색 예시('우주전쟁'):", search_titles("우주전쟁"))

    def show(x, title):
        print(f"\n[추천 예시] '{title}' 기준")
        if hasattr(x, "to_string"):
            print(x.to_string(index=False))
        else:
            print(x)

    show(recommend_by_content("판타스틱", 5, include_scores=True), "판타스틱")
    show(recommend_by_content("귀멸", 5, include_scores=True), "귀멸")
    show(recommend_by_content("우주전쟁", 5, include_scores=True), "우주전쟁")
