# ─────────────────────────────────────────────────────────────────────────────
# TMDB 상세 페이지 링크 출력
# - 전제: 'row'는 추천 결과(또는 상세보기)에서 선택된 영화 1건의 pandas.Series
# - TMDB의 영화 상세 페이지는 https://www.themoviedb.org/movie/<영화ID> 형식
# - CSV에 id 컬럼이 있고, 해당 값이 결측이 아닐 때만 링크를 노출한다.
# ─────────────────────────────────────────────────────────────────────────────
# (필요 시) import pandas as pd
if "id" in row.index and pd.notna(row["id"]):          # row에 'id' 컬럼이 존재하고 값이 결측이 아닌지 확인
    tmdb_url = f"https://www.themoviedb.org/movie/{int(row['id'])}"  # 정수 캐스팅하여 안전한 URL 구성
    # st.markdown으로 하이퍼링크 출력 (사용자 클릭 시 TMDB 상세 페이지로 이동)
    st.markdown(f"[TMDB에서 보기]({tmdb_url})")


# ─────────────────────────────────────────────────────────────────────────────
# 유튜브 예고편 임베드
# - YouTube Data API v3를 사용하여 '<제목> trailer (연도)'로 검색 후 첫 결과를 가져옴
# - API 키가 없으면 None을 반환하여 링크 버튼(검색 페이지)로 우회
# - 요청/파싱 실패 시에도 예외를 삼켜 UX를 유지 (앱 전체가 깨지지 않도록)
# - 캐시(st.cache_data): 동일 쿼리에 대해 24시간 결과 재사용 → API 호출/속도 최적화
# ─────────────────────────────────────────────────────────────────────────────

# 필요 모듈
import os, requests, urllib.parse
import streamlit as st
# (필요 시) import pandas as pd

@st.cache_data(show_spinner=False, ttl=60*60*24)       # 24시간 캐시: 불필요한 외부 API 호출 감소
def fetch_youtube_trailer_url(title: str, year: int | None = None) -> str | None:
    """
    YouTube Data API v3로 '<제목> trailer (year)' 검색 → 첫 영상의 watch URL을 반환한다.
    - API 키 소스:
        1) 환경변수: os.environ['YOUTUBE_API_KEY']
        2) Streamlit secrets: st.secrets['YOUTUBE_API_KEY']
      둘 중 하나라도 있으면 사용. 없으면 None.
    - year를 함께 넣으면 검색 정확도가 다소 향상될 수 있다.
    - 반환 형식: "https://www.youtube.com/watch?v=<videoId>" or None
    """
    # ① 환경변수 → ② st.secrets 순으로 조회
    api_key = os.environ.get("YOUTUBE_API_KEY") or st.secrets.get("YOUTUBE_API_KEY", None)
    if not api_key:
        # 키가 없으면 임베드 대신 검색 버튼(아래 fallback)으로 유도
        return None

    try:
        # 검색 질의: "<영화제목> trailer [연도]"
        q = f"{title} trailer{f' {year}' if year else ''}"

        # YouTube Data API 검색 파라미터
        params = {
            "part": "snippet",        # 스니펫 메타데이터만 필요
            "q": q,                   # 검색어
            "type": "video",          # 동영상만
            "maxResults": 1,          # 첫 결과 1개만
            "regionCode": "KR",       # 한국 기준 추천/필터 (원한다면 변경 가능)
            "key": api_key,           # API 키 (쿼터/과금 유의)
            "safeSearch": "none",     # 검색 안전모드 (필요 시 'moderate' 등으로)
        }

        # GET 호출 (타임아웃 10초로 방어)
        r = requests.get("https://www.googleapis.com/youtube/v3/search", params=params, timeout=10)
        r.raise_for_status()          # HTTP 오류 발생 시 예외

        # JSON 파싱 후 첫 번째 결과의 videoId 추출
        items = r.json().get("items", [])
        if items:
            vid = items[0]["id"]["videoId"]
            return f"https://www.youtube.com/watch?v={vid}"

    except Exception:
        # 네트워크 오류, JSON 파싱 오류, 키 제한 등 어떤 이유든 실패 시 None 반환
        pass

    return None


# ─────────────────────────────────────────────────────────────────────────────
# 예고편 섹션 UI
# - 'row'에서 title과 release_date를 가져와 연도(year)를 유추 (정확도↑)
# - API 키가 있으면 동영상 임베드(st.video), 없으면 검색 결과 링크 버튼으로 대체
# ─────────────────────────────────────────────────────────────────────────────
st.markdown("### 🎞️ 예고편")

# 1) 영화 제목
title = row.get("title", "")  # 제목이 없더라도 빈 문자열로 안전 처리

# 2) 개봉 연도 추출 (검색 정확도 향상용. 실패 시 None)
year = None
if isinstance(row.get("release_date"), str) and row["release_date"].strip():
    try:
        # to_datetime으로 안전하게 파싱 → .year 추출
        year = int(pd.to_datetime(row["release_date"], errors="coerce").year)
    except Exception:
        year = None

# 3) URL 조회 (캐시 사용)
yt_url = fetch_youtube_trailer_url(title, year)

# 4) 임베드 or Fallback
if yt_url:
    # 정상적으로 URL을 얻었다면 동영상 임베드
    st.video(yt_url)
else:
    # API 키가 없거나(또는 실패)한 경우: YouTube 검색 페이지 링크 버튼 제공
    # 검색어: "<제목> trailer [연도]"를 URL 인코딩하여 결과 페이지로 연결
    q = urllib.parse.quote(f"{title} trailer {year or ''}")
    # 최신 Streamlit은 link_button 제공. 구버전이면 st.markdown("[검색](URL)")로 대체 가능.
    st.link_button("YouTube에서 예고편 검색", f"https://www.youtube.com/results?search_query={q}")

# ─────────────────────────────────────────────────────────────────────────────
# [참고/운영 팁]
# - st.secrets 설정 예:
#   .streamlit/secrets.toml 파일에
#     YOUTUBE_API_KEY = "여기에_발급받은_API_키"
#   형태로 저장 (배포 시에도 안전하게 사용 가능)
# - 과금/쿼터: YouTube Data API는 일일 쿼터가 있으므로 캐시(ttl)로 호출 수를 줄여야 한다.
# - 지역/언어: regionCode, 검색어에 'official trailer' 등을 추가해도 좋다.
# - 안전성: 외부 API 실패가 앱 전체에 영향을 주지 않도록 예외는 함수 내부에서 처리했다.
# ─────────────────────────────────────────────────────────────────────────────
